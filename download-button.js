!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o;"undefined"!=typeof window?o=window:"undefined"!=typeof global?o=global:"undefined"!=typeof self&&(o=self),o.DownloadButton=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var React = require('react/addons')
  , cx = React.addons.classSet
  , PT = React.PropTypes

  , saveAs = require('./save-as')

var DownloadButton = React.createClass({displayName: "DownloadButton",
  propTypes: {
    fileData: PT.object,
    genFile: PT.func,
    async: PT.bool,
    generateTitle: PT.string,
    downloadTitle: PT.oneOfType([PT.string, PT.func]),
    loadingTitle: PT.string,
    onDownloaded: PT.func,
  },

  getDefaultProps: function () {
    return {
      async: false,
      downloadTitle: 'Download',
      generateTitle: 'Generate file',
      loadingTitle: 'Loading...',
    }
  },

  getInitialState: function () {
    return {
      loading: false,
      fileData: null,
    }
  },

  _onGenerate: function () {
    this.setState({loading: true, fileData: null})
    this.props.genFile(this._donePreparing)
  },

  _donePreparing: function (fileData) {
    this.setState({
      loading: false,
      fileData: fileData,
    })
  },

  _onDownload: function () {
    var fileData = this.props.fileData || (this.props.async ? this.state.fileData : this.props.genFile())
    if (!fileData) {
      return false
    }
    var blob = new Blob([fileData.contents], {type: fileData.mime})
      , url = URL.createObjectURL(blob)
    saveAs(url, fileData.filename)
    this.props.onDownloaded && this.props.onDownloaded()
  },

  render: function () {
    // need one or the other
    if (!this.props.genFile && !this.props.fileData) {
      return React.createElement("em", null, "Invalid configuration for download button")
    }
    var style = this.props.style
      , cls = 'DownloadButton ' + (this.props.className || '')

    if (this.props.fileData || !this.props.async || this.state.fileData) {
      var title = this.props.downloadTitle
      if ('function' === typeof title) {
        title = title(this.props.fileData || this.state.fileData)
      }
      return React.createElement("button", {style: style, onClick: this._onDownload, className: cls}, 
        title
      )
    }

    if (this.state.loading) {
      return React.createElement("button", {style: style, className: cls + ' DownloadButton-loading'}, 
        this.props.loadingTitle
      )
    }

    return React.createElement("button", {style: style, onClick: this._onGenerate, className: cls + ' DownloadButton-generate'}, 
      this.props.generateTitle
    )
  }
})

module.exports = DownloadButton




},{"./save-as":2,"react/addons":"react/addons"}],2:[function(require,module,exports){

module.exports = saveAs

// from http://stackoverflow.com/questions/283956/
function saveAs(uri, filename) {
  var link = document.createElement('a');
  if (typeof link.download === 'string') {
    document.body.appendChild(link); //Firefox requires the link to be in the body
    link.download = filename;
    link.href = uri;
    link.click();
    document.body.removeChild(link); //remove the link when done
  } else {
    location.replace(uri);
  }
}




},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
